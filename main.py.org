#!/usr/bin/env python
# -*- coding: utf-8 -*-

#PIN configuration
pinOutControl = 40
pinPIR = 38
trigSR04 = 35
echoSR04 = 37

#Global Parameters
lengthCM_SR04 = 15  #距離SR04在幾公分以內, 才認定為正開始使用照護系統
timeLasted_SR04 = 5  #有人站在SR04面前持續了幾秒後, 才認定為要始用照護系統
nextWelcomeTimer = 60  #上次Welcome之後, 至少要隔多久才能再Welcome 

#speakerName = ["Bruce", "Theresa", "Angela" "TW_LIT_AKoan", "TW_SPK_AKoan"]


#-------------------------------------------------
tmpTime_SR04 = 0  #開始計時時的秒數, 用於計算timeLasted_SR04
statusSR04 = 0
statusPIR = 0

tmpLastWelcomeTime = 0  #上次的歡迎時間

import RPi.GPIO as GPIO
import time
import timeit
import speechClass
import json
import os
import random

import pyaudio
import wave
import sys
import os.path

CHUNK_SIZE = 10240

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)

GPIO.setup(pinOutControl ,GPIO.OUT)
GPIO.setup(pinPIR ,GPIO.IN)

GPIO.setup(trigSR04 ,GPIO.OUT)
GPIO.setup(echoSR04 ,GPIO.IN)
GPIO.output(trigSR04, GPIO.LOW)

os.system("amixer set PCM -- 100%")

def is_json(myjson):
        try:
                json_object = json.loads(myjson)
        except ValueError, e:
                return False
        return True

def getWAV_1(vHour):
	'''
	a1	早安
	a2	Good Morning
	a3	早
	a4	早上愉快
	a5	Have a nice day.
	
	b1	午安
	b2	吃中餐了嗎?
	b3	午餐時間快到了
	b4	午安, 早上忙嗎?
	b5	休息一下, 快中午了.
	
	c1	午安.
	c2	午安, 忙嗎？
	c3	Good afternoon.
	c4	Good afternoon. 午安.
	c5	午安, 休息一下.

	d1	Good evening, 晚安
	d2 	晚安, 要準備下班了嗎?
	d3	您好, 今天忙嗎?
	d4	晚安, 忙了一天, 請休息一下.
	d5	晚安, 忙碌的一天又快結束了.

	e1	很晚了, 還不準備下班嗎?
	e2	晚安, 不要加班加太晚, 請早點下班, 
	e3	時間不早了, 忙了一天, 早點休息吧.
	e4	晚安, 又是忙碌的一天, 辛苦了.
	e5	晚安, 很晚了, 要準備下班了嗎?

	f1	辛苦你了
	f2	加班辛苦了
	'''
	if vHour>=5 and vHour<11:
                wordArray_1 = ["a1", "a2", "a3", "a4", "a5"]
        elif vHour>=11 and vHour<13:
                wordArray_1 = ["b1", "b2", "b3", "b4", "b5"]
        elif vHour>=13 and vHour<17:
                wordArray_1 = ["c1", "c2", "c3", "c4", "c5"]
        elif vHour>=17 and vHour<20:
                wordArray_1 = ["d1", "d2", "d3", "d4", "d5"]
        elif vHour>=20 and vHour<24:
                wordArray_1 = ["e1", "e2", "e3", "e4",  "e5"]
        elif vHour>=0 and vHour<5:
                wordArray_1 = ["f1", "f2"]

        return random.choice(wordArray_1)

def getWAV_2():
	'''
	welcome1	歡迎使用福委會的員工照護系統
	welcome2	歡迎您使用福委會員工照護系統
	'''
	wordArray_2 = ["welcome1", "welcome2"]
	return random.choice(wordArray_2)

def speakWords(wordsSpeak, speakerName, frequency, speed):
        nessContent = wordsSpeak
        #print nessContent
        newsArray = nessContent.split("｜")

        i=0
        person = speechClass.TTSspech()

        for newsSpeak in newsArray:
                if(len(newsSpeak)>0):
                        #print len(newsSpeak)
                        print "(" + str(len(newsSpeak)) + ") " + newsSpeak
                        person.setWords("\"" + newsSpeak + "\"")
                        person.setSpeaker("\"" + speakerName + "\"")  # Bruce, Theresa, Angela, MCHEN_Bruce, MCHEN_Jo$
                        person.setSpeed(speed)

                        id = int(person.createConvertID())
                        print "URL: " + person.getVoiceURL()
                        if(id>0):
                                #print person.getVoiceURL()
                                #while person.isBusySpeakingNow():time.sleep( 0.05 )
                                person.playVoice(frequency ,5)


def play_wav(wav_filename, chunk_size=CHUNK_SIZE):
    '''
    Play (on the attached system sound device) the WAV file
    named wav_filename.
    '''

    try:
        print 'Trying to play file ' + wav_filename
        wf = wave.open(wav_filename, 'rb')
    except IOError as ioe:
        sys.stderr.write('IOError on file ' + wav_filename + '\n' + \
        str(ioe) + '. Skipping.\n')
        return
    except EOFError as eofe:
        sys.stderr.write('EOFError on file ' + wav_filename + '\n' + \
        str(eofe) + '. Skipping.\n')
        return

    # Instantiate PyAudio.
    p = pyaudio.PyAudio()
    # Open stream.
    stream = p.open(format=p.get_format_from_width(wf.getsampwidth()),
        channels=wf.getnchannels(),
        rate=wf.getframerate(),
                    output=True)

    data = wf.readframes(chunk_size)
    while len(data) > 0:
        stream.write(data)
        data = wf.readframes(chunk_size)

    # Stop stream.
    stream.stop_stream()
    stream.close()

    # Close PyAudio.
    p.terminate()


def readSR04():
    
        time.sleep(0.3)

        GPIO.output(trigSR04, True)
        time.sleep(0.00001)
        GPIO.output(trigSR04, False)

        # listen to the input pin. 0 means nothing is happening. Once a
        # signal is received the value will be 1 so the while loop
        # stops and has the last recorded time the signal was 0
        # change this value to the pin you are using
        # GPIO input = the pin that's connected to "Echo" on the sensor
        while GPIO.input(echoSR04) == 0:
          signaloff = time.time()
        
        # listen to the input pin. Once a signal is received, record the
        # time the signal came through
        # change this value to the pin you are using
        # GPIO input = the pin that's connected to "Echo" on the sensor
        while GPIO.input(echoSR04) == 1:
          signalon = time.time()
        
        # work out the difference in the two recorded times above to 
        # calculate the distance of an object in front of the sensor
        timepassed = signalon - signaloff
        
        # we now have our distance but it's not in a useful unit of
        # measurement. So now we convert this distance into centimetres
        distance = timepassed * 17000
        
        # return the distance of an object in front of the sensor in cm
        return distance

def getDistance():
	sampleCounts = 6  #要取幾次標本

	count = 0
	maxValue = 0
	minValue = 99999
	totalValue = 0

	while(count<sampleCounts):
		valueSR04 = readSR04()
		if valueSR04>maxValue:
			maxValue = valueSR04
		if valueSR04<minValue:
			minValue = valueSR04

		totalValue += valueSR04
		count += 1
	
	return (totalValue-maxValue-minValue) / (sampleCounts-2)

while True:


	dt = list(time.localtime())
        nowHour = dt[3]
        nowMinute = dt[4]


	statusPIR = GPIO.input(pinPIR)

	#如果有人站在前面
	if getDistance()<lengthCM_SR04:
		#如果是第一次發現有人, 則開始計時.
		if statusSR04 == 0:
			print "第一次發現有人, 則開始計時"
			tmpTime_SR04 = timeit.default_timer()
			statusSR04 = 1
		else:
			#如果在SR04前面站的時間夠久, 且距離上次Welcome時間也夠長了, 則開始Welcome
			if (timeit.default_timer() - tmpTime_SR04) > timeLasted_SR04:
				print "在SR04前面站的時間夠久"
		                if (tmpLastWelcomeTime == 0 or (timeit.default_timer() - tmpLastWelcomeTime)>nextWelcomeTimer):
					print "距離上次Welcome時間也夠長"
                        		tmpLastWelcomeTime = timeit.default_timer()

		                        word_1 = getWAV_1(nowHour)
		                        word_2 = getWAV_2()

		                        play_wav("wav/man/"+word_1+".wav", CHUNK_SIZE)
	
		                        #speaker = random.choice(speakerName)


	#如果沒人站在前面
	else:
		#如果是剛離開
		if statusSR04 == 1:
			print "您站了" + str(timeit.default_timer() - tmpTime_SR04) + "秒鐘。"
			statusSR04 = 0
			tmpTime_SR04 = 0
	
